// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	GetAccounts(ctx echo.Context) error

	// (POST /accounts)
	PostAccounts(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccounts(ctx)
	return err
}

// PostAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAccounts(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.PostAccounts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUwW7bMAz9FYEbsItjZ+2wg29pOwwBtq4Y0FPRg2rTjlpZUim6aRD43wfJTt3Aaddh",
	"A3YJFJN87/FR4hYK2zhr0LCHfAu+WGEj43FRFLY1HI5S6x8V5FdbeE9YQQ7vsrEsG2qyc1zvarpkC46s",
	"Q2KFEW15Fn5L9AUpx8oayOHSqPsWxfJM2ErIvjSFBCpLjWTIQRn+/AkS4I3D/i/WSJDA48xKp2aFLbFG",
	"M8NHJjljWUeq2lIDOThSjaTNHW6g6xIY8F/RoUo0rCqFJCpLglf4JEqcWuOZ2oKxFBXZJkZde6NVIe5w",
	"IxrJSEpqH1p5VhmC6diBZ1Kmhi4BRs9TJcsPjQgRZWqh1QOK1pWS0b+EcDSFIFm+wcLgyPDJ3txiwdBd",
	"dwl8IbIUMPeHF3yeMsVkEWP7hMdHBwgTaNB7Wb8ItAtPWu0SILxvFWEJ+RUMhLv0IPvZzZtoN7I5QHmm",
	"vNNyI0J0Mu3fSoiY1xMHQ5oylZ3SncjiDk0pFhfLyPbd3iiNp1YZsZZaIwsmabwsQn7g16pA43FsAL5e",
	"fHs4hgRa0pDDitn5PMvW63Vamza1VGdDjc9qp2fH6TxFk6640fGyKNYBpbL1rGeEBB6QfK9vns7TjyHP",
	"OjTSKcghAAQ+J3kVjcwGe/o3hgdu70/klowXUmvxlBwxSYaUZRn6QF6MMULvbBAd0I7m8/62GcZh8Tin",
	"VRGLs1sfSHYrKpwUYxMLX9tK40rajUsSyU0/rX39WnmOq2jUL/rZeojJlWw1/5HE15T1j+2AjkuDjw7j",
	"rsExx9lDG+OUUDIKaXaKJ4ZfWL/v+H2Lnk9suflnnTzf/NN2znEtFk/ixnfE1GL3l1fgTZOfShpCoujd",
	"20lI//uYu677FQAA//8WUREakwcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
